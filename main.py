import os
import asyncio

from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.types import BotCommand
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

from __init__ import bot, dp, logger
from parser import get_evaluations_screenshot


class AuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()


@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∏–∑ e-learning.bmstu.ru. "
                         "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /get_evaluations")


@dp.message(Command("get_evaluations"))
async def cmd_get_evaluations(message: Message, state: FSMContext):
    await message.answer(
        "üîê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç e-learning.bmstu.ru:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AuthStates.waiting_for_login)


@dp.message(AuthStates.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    login = message.text.strip()
    await state.update_data(login=login)

    await message.answer(
        "üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AuthStates.waiting_for_password)


@dp.message(AuthStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    password = message.text.strip()
    user_data = await state.get_data()
    login = user_data.get("login")

    await state.clear()

    wait_msg = await message.answer("‚åõ –ü–æ–ª—É—á–∞—é –æ—Ü–µ–Ω–∫–∏...")

    try:
        screenshot_path = await asyncio.to_thread(
            get_evaluations_screenshot, login, password
        )

        await bot.delete_message(chat_id=message.chat.id, message_id=wait_msg.message_id)

        if screenshot_path:
            photo = FSInputFile(screenshot_path)
            await message.answer_photo(
                photo=photo,
                caption="üìä –í–æ—Ç –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:\n\nP.S. –ù—É –µ–±–∞—Ç—å —Ç—ã –ø–ª–æ—Ö–æ —É—á–∏—à—å ü§°"
            )
            os.remove(screenshot_path)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def main():
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="/get_evaluations", description="–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫"),
    ])
    logger.info("üö© Starting bot")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üèÅ Stopped bot")
